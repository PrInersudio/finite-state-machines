#!/bin/bash

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
DEBUG_MODE=false
LOG_FILE="redis_commands.log"

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case "$1" in
        --debug) DEBUG_MODE=true; shift ;;
        *) break ;;
    esac
done

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞
if $DEBUG_MODE; then
    > "$LOG_FILE"
    echo "üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ $LOG_FILE"
fi

# –ó–∞–ø—É—Å–∫ Redis —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º (–µ—Å–ª–∏ debug)
start_redis() {
    docker-compose up --build -d redis
    
    if $DEBUG_MODE; then
        docker-compose exec -T redis redis-cli MONITOR > "$LOG_FILE" &
        MONITOR_PID=$!
    fi
}

start_redis

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Redis
timeout=30
while ! docker-compose exec -T redis redis-cli ping | grep -q "PONG"; do
    if (( timeout-- <= 0 )); then
        echo "‚õî Redis –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥" >&2
        docker-compose logs redis >&2
        exit 1
    fi
    sleep 1
done

# –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
echo "üßπ –û—á–∏—â–∞–µ–º –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º..."
if ! docker-compose exec -T redis redis-cli FLUSHALL >/dev/null; then
    echo "‚õî –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î" >&2
    exit 1
fi

# –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
PROGRAM_ARGS=("$@")
if $DEBUG_MODE; then
    PROGRAM_ARGS+=("--no-clean")  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ debug
    echo "‚öôÔ∏è  –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${PROGRAM_ARGS[*]}"
fi

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
echo "üîß –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã..."
./run.exe "${PROGRAM_ARGS[@]}"
EXIT_CODE=$?

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –¥–∞–º–ø–∞
create_debug_dump() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local prefix="redis_dump_${timestamp}"
    
    echo "üíæ –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –¥–∞–º–ø..."
    docker-compose exec -T redis redis-cli SAVE
    docker cp $(docker-compose ps -q redis):/data/dump.rdb "${prefix}.rdb"

    rdb -c json -o "${prefix}.json" "${prefix}.rdb" && \
    python3 analyze_dump.py "${prefix}.json" && \
    rm -f "${prefix}.json" "${prefix}.rdb"
}

# –û—á–∏—Å—Ç–∫–∞
cleanup() {
    if $DEBUG_MODE; then
        kill $MONITOR_PID 2>/dev/null
        create_debug_dump
        echo "üìå –õ–æ–≥ –∫–æ–º–∞–Ω–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ $LOG_FILE"
    fi

    echo "üßΩ –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É..."
    docker-compose down -v
}

trap cleanup EXIT SIGINT
exit $EXIT_CODE